openapi: 3.0.3
info:
  title: Laravel
  description: ''
  version: 1.0.0
servers:
  -
    url: 'http://127.0.0.1:8000'
paths:
  /api/users/current-user:
    get:
      summary: "Get current user's info"
      operationId: getCurrentUsersInfo
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: 1
                    name: radina555eee
                    email: dasdar44d@dada.com
                    gender: none
                    blocked: 0
                    role: client
                    address: 'Address 1'
                    phoneNumber: '08990889011'
                  status: 200
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      name:
                        type: string
                        example: radina555eee
                      email:
                        type: string
                        example: dasdar44d@dada.com
                      gender:
                        type: string
                        example: none
                      blocked:
                        type: integer
                        example: 0
                      role:
                        type: string
                        example: client
                      address:
                        type: string
                        example: 'Address 1'
                      phoneNumber:
                        type: string
                        example: '08990889011'
                  status:
                    type: integer
                    example: 200
      tags:
        - Endpoints
  /api/users/logout:
    post:
      summary: 'Logout for user'
      operationId: logoutForUser
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - Endpoints
  /api/users/change-password:
    post:
      summary: 'Change password for user'
      operationId: changePasswordForUser
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data: []
                  status: 200
                properties:
                  data:
                    type: array
                    example: []
                  status:
                    type: integer
                    example: 200
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The current password is match with old password.'
                  errors:
                    current_password:
                      - 'The current password is match with old password.'
                properties:
                  message:
                    type: string
                    example: 'The current password is match with old password.'
                  errors:
                    type: object
                    properties:
                      current_password:
                        type: array
                        example:
                          - 'The current password is match with old password.'
                        items:
                          type: string
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                current_password:
                  type: string
                  description: ''
                  example: provident
                new_password:
                  type: string
                  description: ''
                  example: beatae
                new_confirm_password:
                  type: string
                  description: 'The value and <code>new_password</code> must match.'
                  example: null
              required:
                - current_password
                - new_password
  /api/users/update:
    post:
      summary: "Update user's info"
      operationId: updateUsersInfo
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data: []
                  status: 200
                properties:
                  data:
                    type: array
                    example: []
                  status:
                    type: integer
                    example: 200
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The selected gender is invalid.'
                  errors:
                    gender:
                      - 'The selected gender is invalid.'
                properties:
                  message:
                    type: string
                    example: 'The selected gender is invalid.'
                  errors:
                    type: object
                    properties:
                      gender:
                        type: array
                        example:
                          - 'The selected gender is invalid.'
                        items:
                          type: string
      tags:
        - Endpoints
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: ''
                  example: dicta
                gender:
                  type: string
                  description: 'Must be one of <code>female</code>, <code>male</code>, or <code>none</code>.'
                  example: none
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: marquardt.mittie@example.com
                role:
                  type: string
                  description: 'Must be one of <code>client</code>, <code>organizer</code>, or <code>admin</code>.'
                  example: client
                address:
                  type: string
                  description: ''
                  example: quas
                phoneNumber:
                  type: string
                  description: ''
                  example: quos
  '/api/users/{id}/blacklist':
    post:
      summary: 'Blocking user'
      operationId: blockingUser
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data: []
                  status: 200
                properties:
                  data:
                    type: array
                    example: []
                  status:
                    type: integer
                    example: 200
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  success: false
                  messages:
                    - 'Non existing user'
                properties:
                  success:
                    type: boolean
                    example: false
                  messages:
                    type: array
                    example:
                      - 'Non existing user'
                    items:
                      type: string
      tags:
        - Endpoints
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the user.'
        example: 3
        required: true
        schema:
          type: integer
  '/api/events/{eventTypeId}/foodTypes':
    get:
      summary: 'Getting food types for event type'
      operationId: gettingFoodTypesForEventType
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example:
                  - sea-food
                  - sweets
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The organizer id field is required.'
                  errors:
                    organizerId:
                      - 'The organizer id field is required.'
                properties:
                  message:
                    type: string
                    example: 'The organizer id field is required.'
                  errors:
                    type: object
                    properties:
                      organizerId:
                        type: array
                        example:
                          - 'The organizer id field is required.'
                        items:
                          type: string
      tags:
        - Endpoints
    parameters:
      -
        in: path
        name: eventTypeId
        description: ''
        example: 2
        required: true
        schema:
          type: integer
  '/api/events/personal/{mouth}/{year}':
    get:
      summary: 'Getting all events that are not finished for user'
      operationId: gettingAllEventsThatAreNotFinishedForUser
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "[\n   {\n     \"id\": 1,\n     \"status\": \"requested-actions\",\n     \"name\": \"event 1\",\n     \"start\": null,\n     \"end\": null,\n     \"organizerName\": \"radina\",\n     \"organizerEmail\": \"radina@gmail.com\",\n     \"organizerId\": 1,\n     \"type\": \"wedding\",\n     \"moreInfo\": null,\n     \"description\": null,\n     \"accommodationNeeded\": 1,\n     \"place\": null,\n     \"pricePerGuest\": null,\n     \"priceForFood\": null,\n     \"foodDetails\": null,\n     \"priceForAccommodation\": null,\n     \"accommodationDetails\": null,\n     \"accommodationContact\": null,\n     \"accommodationWebsite\": null,\n     \"hasGivenFeedback\": false\n     \"isPublic\": false\n  }\n]"
      tags:
        - Endpoints
    parameters:
      -
        in: path
        name: mouth
        description: ''
        example: et
        required: true
        schema:
          type: string
      -
        in: path
        name: year
        description: ''
        example: vero
        required: true
        schema:
          type: string
  /api/events/personal/all:
    get:
      summary: 'Getting all owned events'
      operationId: gettingAllOwnedEvents
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                example:
                  -
                    id: 1
                    status: finished
                    name: '1'
                    organizerEmail: dasda34e4d@dada.comhee
                    clientEmail: dasda34e4d@dada.comhee
      tags:
        - Endpoints
  '/api/events/{id}/accept':
    post:
      summary: 'Accepting event'
      operationId: acceptingEvent
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  success: false
                  messages:
                    - 'Non existing event'
                properties:
                  success:
                    type: boolean
                    example: false
                  messages:
                    type: array
                    example:
                      - 'Non existing event'
                    items:
                      type: string
      tags:
        - Endpoints
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the event.'
        example: 2
        required: true
        schema:
          type: integer
  '/api/events/{id}/reject':
    post:
      summary: 'Rejecting event'
      operationId: rejectingEvent
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  success: false
                  messages:
                    - 'Non existing event'
                properties:
                  success:
                    type: boolean
                    example: false
                  messages:
                    type: array
                    example:
                      - 'Non existing event'
                    items:
                      type: string
      tags:
        - Endpoints
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the event.'
        example: 2
        required: true
        schema:
          type: integer
  '/api/events/{id}':
    get:
      summary: 'Getting event by id'
      operationId: gettingEventById
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "[\n     \"id\": 1,\n     \"status\": \"finished\",\n     \"name\": \"radi\",\n     \"start\": null,\n     \"end\": null,\n     \"organizerName\": \"radina\",\n     \"organizerEmail\": \"radina@gmail.com\",\n     \"organizerId\": 1,\n     \"type\": \"wedding\",\n     \"moreInfo\": null,\n     \"description\": null,\n     \"accommodationNeeded\": 1,\n     \"place\": null,\n     \"pricePerGuest\": null,\n     \"priceForFood\": null,\n     \"foodDetails\": null,\n     \"priceForAccommodation\": null,\n     \"accommodationDetails\": null,\n     \"accommodationContact\": null,\n     \"accommodationWebsite\": null,\n     \"hasGivenFeedback\": false,\n     \"isPublic\": false\n   ],"
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  success: false
                  messages:
                    - 'This event is private'
                properties:
                  success:
                    type: boolean
                    example: false
                  messages:
                    type: array
                    example:
                      - 'This event is private'
                    items:
                      type: string
      tags:
        - Endpoints
    post:
      summary: "Saves the event's data that the organizer is putting"
      operationId: savesTheEventsDataThatTheOrganizerIsPutting
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data: []
                  status: 200
                properties:
                  data:
                    type: array
                    example: []
                  status:
                    type: integer
                    example: 200
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'This field is required. (and 2 more errors)'
                  errors:
                    priceForAccommodation:
                      - 'This field is required.'
                    accommodationDetails:
                      - 'This field is required.'
                    accommodationContact:
                      - 'This field is required.'
                properties:
                  message:
                    type: string
                    example: 'This field is required. (and 2 more errors)'
                  errors:
                    type: object
                    properties:
                      priceForAccommodation:
                        type: array
                        example:
                          - 'This field is required.'
                        items:
                          type: string
                      accommodationDetails:
                        type: array
                        example:
                          - 'This field is required.'
                        items:
                          type: string
                      accommodationContact:
                        type: array
                        example:
                          - 'This field is required.'
                        items:
                          type: string
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                eventId:
                  type: integer
                  description: ''
                  example: 17
                place:
                  type: string
                  description: ''
                  example: qui
                placeWebsite:
                  type: string
                  description: ''
                  example: quisquam
                placeGoogleMapsLink:
                  type: string
                  description: ''
                  example: iure
                pricePerGuest:
                  type: number
                  description: 'Must be at least 1.'
                  example: 60
                priceForFood:
                  type: number
                  description: 'Must be at least 1.'
                  example: 90
                priceForAccommodation:
                  type: number
                  description: ''
                  example: 58.0
                accommodationDetails:
                  type: string
                  description: ''
                  example: et
                accommodationContact:
                  type: string
                  description: ''
                  example: velit
              required:
                - eventId
                - place
                - placeWebsite
                - placeGoogleMapsLink
                - pricePerGuest
                - priceForFood
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the event.'
        example: 2
        required: true
        schema:
          type: integer
  '/api/events/{id}/comments':
    get:
      summary: 'Getting all comments for event'
      operationId: gettingAllCommentsForEvent
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                example:
                  -
                    userId: 1
                    userName: radina
                    content: 'really good :D'
      tags:
        - Endpoints
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the event.'
        example: 2
        required: true
        schema:
          type: integer
  '/api/events/{id}/pics':
    get:
      summary: 'Getting all pics for event'
      operationId: gettingAllPicsForEvent
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example:
                  - 'https://picsum.photos/200/300'
      tags:
        - Endpoints
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the event.'
        example: 2
        required: true
        schema:
          type: integer
  /api/events/new:
    post:
      summary: 'Creates an event with basic data from client'
      operationId: createsAnEventWithBasicDataFromClient
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data: []
                  status: 200
                properties:
                  data:
                    type: array
                    example: []
                  status:
                    type: integer
                    example: 200
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "This event type is not part of the organizer's ones (and 1 more error)"
                  errors:
                    type:
                      - "This event type is not part of the organizer's ones"
                      - "This food type is not part of the organizer's menu,catering options"
                properties:
                  message:
                    type: string
                    example: "This event type is not part of the organizer's ones (and 1 more error)"
                  errors:
                    type: object
                    properties:
                      type:
                        type: array
                        example:
                          - "This event type is not part of the organizer's ones"
                          - "This food type is not part of the organizer's menu,catering options"
                        items:
                          type: string
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                organizerId:
                  type: integer
                  description: ''
                  example: 14
                name:
                  type: string
                  description: ''
                  example: culpa
                start:
                  type: string
                  description: 'Must be a valid date. Must be a date before or equal to <code>end</code>.'
                  example: '2020-10-24'
                end:
                  type: string
                  description: 'Must be a valid date. Must be a date after or equal to <code>start</code>.'
                  example: '2096-05-19'
                type:
                  type: integer
                  description: ''
                  example: 9
                isCatering:
                  type: boolean
                  description: ''
                  example: false
                foodType:
                  type: string
                  description: ''
                  example: harum
                description:
                  type: string
                  description: ''
                  example: 'Omnis in aut magnam.'
                guestsCount:
                  type: integer
                  description: 'Must be at least 1.'
                  example: 53
                accommodationNeeded:
                  type: boolean
                  description: ''
                  example: true
              required:
                - organizerId
                - name
                - start
                - end
                - type
                - isCatering
                - foodType
                - description
                - guestsCount
                - accommodationNeeded
  '/api/users/{id}/event-types':
    get:
      summary: 'Getting all event types for user'
      operationId: gettingAllEventTypesForUser
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                example:
                  -
                    id: 1
                    name: wedding
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  success: false
                  messages:
                    - 'User either does not exist or it is not an organizer'
                properties:
                  success:
                    type: boolean
                    example: false
                  messages:
                    type: array
                    example:
                      - 'User either does not exist or it is not an organizer'
                    items:
                      type: string
      tags:
        - Endpoints
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the user.'
        example: 3
        required: true
        schema:
          type: integer
  /api/users/event-types:
    get:
      summary: 'Getting all event types for organizer'
      operationId: gettingAllEventTypesForOrganizer
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                example:
                  -
                    id: 1
                    name: wedding
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  success: false
                  messages:
                    - 'User either does not exist or it is not an organizer'
                properties:
                  success:
                    type: boolean
                    example: false
                  messages:
                    type: array
                    example:
                      - 'User either does not exist or it is not an organizer'
                    items:
                      type: string
      tags:
        - Endpoints
  '/api/users/{id}/{eventTypeId}/menu-types':
    get:
      summary: 'Getting all menu types for user'
      operationId: gettingAllMenuTypesForUser
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                example:
                  -
                    id: 1
                    name: sea-food
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  success: false
                  messages:
                    - 'User either does not exist or it is not an organizer'
                properties:
                  success:
                    type: boolean
                    example: false
                  messages:
                    type: array
                    example:
                      - 'User either does not exist or it is not an organizer'
                    items:
                      type: string
      tags:
        - Endpoints
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the user.'
        example: 3
        required: true
        schema:
          type: integer
      -
        in: path
        name: eventTypeId
        description: ''
        example: qui
        required: true
        schema:
          type: string
  '/api/users/{eventTypeId}/menu-types':
    get:
      summary: 'Getting all menu types for organizer'
      operationId: gettingAllMenuTypesForOrganizer
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                example:
                  -
                    id: 1
                    name: sea-food
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  success: false
                  messages:
                    - 'User either does not exist or it is not an organizer'
                properties:
                  success:
                    type: boolean
                    example: false
                  messages:
                    type: array
                    example:
                      - 'User either does not exist or it is not an organizer'
                    items:
                      type: string
      tags:
        - Endpoints
    parameters:
      -
        in: path
        name: eventTypeId
        description: ''
        example: 3
        required: true
        schema:
          type: integer
  '/api/users/{id}/{eventTypeId}/catering-types':
    get:
      summary: 'Getting all catering types for user'
      operationId: gettingAllCateringTypesForUser
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                example:
                  -
                    id: 1
                    name: sea-food
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  success: false
                  messages:
                    - 'User either does not exist or it is not an organizer'
                properties:
                  success:
                    type: boolean
                    example: false
                  messages:
                    type: array
                    example:
                      - 'User either does not exist or it is not an organizer'
                    items:
                      type: string
      tags:
        - Endpoints
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the user.'
        example: 3
        required: true
        schema:
          type: integer
      -
        in: path
        name: eventTypeId
        description: ''
        example: ipsam
        required: true
        schema:
          type: string
  '/api/users/{eventTypeId}/catering-types':
    get:
      summary: 'Getting all catering types for organizer'
      operationId: gettingAllCateringTypesForOrganizer
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                example:
                  -
                    id: 1
                    name: sea-food
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  success: false
                  messages:
                    - 'User either does not exist or it is not an organizer'
                properties:
                  success:
                    type: boolean
                    example: false
                  messages:
                    type: array
                    example:
                      - 'User either does not exist or it is not an organizer'
                    items:
                      type: string
      tags:
        - Endpoints
    parameters:
      -
        in: path
        name: eventTypeId
        description: ''
        example: 3
        required: true
        schema:
          type: integer
  '/api/users/create/{type}':
    post:
      summary: 'Adding new type (event,menu,catering)'
      operationId: addingNewTypeeventmenucatering
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data: []
                  status: 200
                properties:
                  data:
                    type: array
                    example: []
                  status:
                    type: integer
                    example: 200
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The value field is required.'
                  errors:
                    value:
                      - 'The value field is required.'
                properties:
                  message:
                    type: string
                    example: 'The value field is required.'
                  errors:
                    type: object
                    properties:
                      value:
                        type: array
                        example:
                          - 'The value field is required.'
                        items:
                          type: string
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                eventTypeId:
                  type: integer
                  description: ''
                  example: 3
                value:
                  type: string
                  description: ''
                  example: aut
              required:
                - value
    parameters:
      -
        in: path
        name: type
        description: ''
        example: quia
        required: true
        schema:
          type: string
  '/api/users/update/{type}':
    post:
      summary: "Updating type's info"
      operationId: updatingTypesInfo
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data: []
                  status: 200
                properties:
                  data:
                    type: array
                    example: []
                  status:
                    type: integer
                    example: 200
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The given data was invalid.'
                  errors:
                    id:
                      - null
                      - 'Non existing catering type'
                properties:
                  message:
                    type: string
                    example: 'The given data was invalid.'
                  errors:
                    type: object
                    properties:
                      id:
                        type: array
                        example:
                          - null
                          - 'Non existing catering type'
                        items:
                          type: string
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: ''
                  example: 17
                value:
                  type: string
                  description: ''
                  example: omnis
              required:
                - id
                - value
    parameters:
      -
        in: path
        name: type
        description: ''
        example: et
        required: true
        schema:
          type: string
  '/api/users/{type}':
    post:
      summary: 'Deleting type'
      operationId: deletingType
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data: []
                  status: 200
                properties:
                  data:
                    type: array
                    example: []
                  status:
                    type: integer
                    example: 200
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Non existing catering type'
                  errors:
                    id:
                      - 'Non existing catering type'
                properties:
                  message:
                    type: string
                    example: 'Non existing catering type'
                  errors:
                    type: object
                    properties:
                      id:
                        type: array
                        example:
                          - 'Non existing catering type'
                        items:
                          type: string
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: number
                  description: ''
                  example: 87558629.032044
              required:
                - id
    parameters:
      -
        in: path
        name: type
        description: ''
        example: 3
        required: true
        schema:
          type: integer
  /api/chat/list:
    get:
      summary: 'Getting all user who the current user has chatted'
      operationId: gettingAllUserWhoTheCurrentUserHasChatted
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                example:
                  -
                    id: 1
                    value: radina
      tags:
        - Endpoints
  '/api/chat/{id}':
    get:
      summary: 'Get all messages the user has received and sent'
      operationId: getAllMessagesTheUserHasReceivedAndSent
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                example:
                  -
                    id: 1
                    sender: radina
                    message: message
                    createdAt: '2023-02-03T10:54:59.000000Z'
      tags:
        - Endpoints
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the chat.'
        example: voluptatem
        required: true
        schema:
          type: string
  /api/chat:
    post:
      summary: 'Save message'
      operationId: saveMessage
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data: []
                  status: 200
                properties:
                  data:
                    type: array
                    example: []
                  status:
                    type: integer
                    example: 200
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: ''
                  example: odit
                message:
                  type: string
                  description: ''
                  example: et
              required:
                - id
                - message
  /api/organizers:
    get:
      summary: 'Getting all organizers'
      operationId: gettingAllOrganizers
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: 2
                    name: radina
                    email: dasda34e4d@dada.comh
                  status: 200
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 2
                      name:
                        type: string
                        example: radina
                      email:
                        type: string
                        example: dasda34e4d@dada.comh
                  status:
                    type: integer
                    example: 200
      tags:
        - Endpoints
  '/api/events/{mouth}/{year}':
    get:
      summary: 'Getting all finished events'
      operationId: gettingAllFinishedEvents
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                example:
                  -
                    id: 1
                    status: finished
                    name: '1'
                    type: '11'
                    place: null
                    clientEmail: client@gmail.com
                    isPublic: true
                    start: null
                    end: null
                    organizerName: radina
                    organizerEmail: radina@gmail.com
      tags:
        - Endpoints
      security: []
    parameters:
      -
        in: path
        name: mouth
        description: ''
        example: 2
        required: true
        schema:
          type: integer
      -
        in: path
        name: year
        description: ''
        example: ut
        required: true
        schema:
          type: string
  /api/auth/login:
    post:
      summary: 'Log in the user'
      operationId: logInTheUser
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n \"token\": \"eyJ0eXA...\",\n \"token_type\": \"Bearer\",\n \"role\" => \"admin\",\n \"email\" => \"radina@gmail.com\",\n \"blacklistedCount\" =>  [],\n \"pendingEventsCount\" => 0\n}"
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Email & Password does not match with our record.'
                  errors:
                    email:
                      - 'Email & Password does not match with our record.'
                properties:
                  message:
                    type: string
                    example: 'Email & Password does not match with our record.'
                  errors:
                    type: object
                    properties:
                      email:
                        type: array
                        example:
                          - 'Email & Password does not match with our record.'
                        items:
                          type: string
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: carlee30@example.org
                password:
                  type: string
                  description: ''
                  example: ab
              required:
                - email
                - password
      security: []
  /api/auth/register:
    post:
      summary: 'Create User'
      operationId: createUser
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n \"access_token\": \"eyJ0eXA...\",\n \"token_type\": \"Bearer\",\n \"role\" => \"admin\",\n \"email\" => \"radina@gmail.com\",\n \"blacklistedCount\" =>  [],\n \"pendingEventsCount\" => 0\n}"
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The selected gender is invalid. (and 1 more error)'
                  errors:
                    gender:
                      - 'The selected gender is invalid.'
                    email:
                      - 'The email has already been taken.'
                properties:
                  message:
                    type: string
                    example: 'The selected gender is invalid. (and 1 more error)'
                  errors:
                    type: object
                    properties:
                      gender:
                        type: array
                        example:
                          - 'The selected gender is invalid.'
                        items:
                          type: string
                      email:
                        type: array
                        example:
                          - 'The email has already been taken.'
                        items:
                          type: string
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: ''
                  example: voluptatem
                gender:
                  type: string
                  description: 'Must be one of <code>female</code>, <code>male</code>, or <code>none</code>.'
                  example: male
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: grimes.jeffery@example.com
                role:
                  type: string
                  description: 'Must be one of <code>client</code>, <code>organizer</code>, or <code>admin</code>.'
                  example: organizer
                password:
                  type: string
                  description: ''
                  example: autem
                phoneNumber:
                  type: string
                  description: ''
                  example: illum
                address:
                  type: string
                  description: ''
                  example: laboriosam
              required:
                - name
                - gender
                - email
                - role
                - password
                - phoneNumber
                - address
      security: []
tags:
  -
    name: Endpoints
    description: ''
components:
  securitySchemes:
    default:
      type: http
      scheme: bearer
      description: ''
security:
  -
    default: []
