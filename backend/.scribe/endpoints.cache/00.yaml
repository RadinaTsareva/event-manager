## Autogenerated by Scribe. DO NOT MODIFY.

name: Endpoints
description: ''
endpoints:
  -
    httpMethods:
      - GET
    uri: api/current-user
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: "Get current user's info"
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "data": {
               "id": 1,
               "name": "radina555eee",
               "email": "dasdar44d@dada.com",
               "gender": "none",
               "blocked": 0,
               "role": "client",
               "address": "Address 1",
               "phone-number" : "08990889011"
            },
            "status": 200
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer hfDde1b84VE35kvgPaca6Z6'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/auth/logout
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Logout for user'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer a4hc1E5kdgaPfe3vZb6V86D'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/auth/change-password
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Change password for user'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      current_password:
        name: current_password
        description: ''
        required: true
        example: corporis
        type: string
        custom: []
      new_password:
        name: new_password
        description: ''
        required: true
        example: nulla
        type: string
        custom: []
      new_confirm_password:
        name: new_confirm_password
        description: 'The value and <code>new_password</code> must match.'
        required: false
        example: null
        type: string
        custom: []
    cleanBodyParameters:
      current_password: corporis
      new_password: nulla
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "data": [],
           "status": 200
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
           "message": "The current password is match with old password.",
            "errors": {
                "current_password": [
                   "The current password is match with old password."
                ]
             }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer gVck5b4ZaE3hDv186fda6eP'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/auth/update-user
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: "Update user's info"
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: ''
        required: false
        example: consequatur
        type: string
        custom: []
      gender:
        name: gender
        description: 'Must be one of <code>female</code>, <code>male</code>, or <code>none</code>.'
        required: false
        example: none
        type: string
        custom: []
      email:
        name: email
        description: 'Must be a valid email address.'
        required: false
        example: uebert@example.org
        type: string
        custom: []
      role:
        name: role
        description: 'Must be one of <code>client</code>, <code>organizer</code>, or <code>admin</code>.'
        required: false
        example: organizer
        type: string
        custom: []
      address:
        name: address
        description: ''
        required: false
        example: est
        type: string
        custom: []
      phone_number:
        name: phone_number
        description: ''
        required: false
        example: ex
        type: string
        custom: []
    cleanBodyParameters:
      name: consequatur
      gender: none
      email: uebert@example.org
      role: organizer
      address: est
      phone_number: ex
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "data": [],
           "status": 200
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
           "message": "The selected gender is invalid.",
            "errors": {
                "gender": [
                   "The selected gender is invalid."
                ]
             }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6bDE14cgkPvdhae863ZVfa5'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/events/types
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: "Getting all event's types"
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '["wedding","party"]'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer h4g8ZEVev56a36dfcbDPak1'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/events/organizers
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Getting all organizers'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
               "data": {
                   "id": 2,
                   "name": "radina",
                   "email": "dasda34e4d@dada.comh"
               },
               "status": 200
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer d4kDeV1Egcaba5vhZ663Pf8'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/events/{eventType}/foodTypes'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Getting food types for event type'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      eventType:
        name: eventType
        description: ''
        required: true
        example: 1
        type: integer
        custom: []
    cleanUrlParameters:
      eventType: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '["sea-food","sweets"]'
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
               "success":false,
               "messages":["Wrong event type"]
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 8evVPcbdE54f6g61Dkaa3hZ'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/events/personal
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Getting all events that are not finished for user'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          [
             {
               "id": 1,
               "status": "requested-actions",
               "name": "event 1",
               "start": null,
               "end": null,
               "organizerName": "radina",
               "organizerEmail": "radina@gmail.com",
               "type": "wedding",
               "moreInfo": null,
               "description": null,
               "accommodationNeeded": 1,
               "place": null,
               "pricePerGuest": null,
               "priceForFood": null,
               "foodDetails": null,
               "priceForAccommodation": null,
               "accommodationDetails": null,
               "accommodationContact": null,
               "hasGivenFeedback": false
            }
          ]
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer dvaD6gZVfc6E18ehP54bka3'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/events/{id}/accept'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Accepting event'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the event.'
        required: true
        example: 1
        type: integer
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 403
        content: |-
          {
               "success":false,
               "messages":["Non existing event"]
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer eP154Vdvfack6836EZabhgD'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/events/{id}/reject'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Rejecting event'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the event.'
        required: true
        example: 1
        type: integer
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 403
        content: |-
          {
               "success":false,
               "messages":["Non existing event"]
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 4g1D6aevhf6Z5cVkEdb3P8a'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/events/{id}'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Getting event by id'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the event.'
        required: true
        example: 1
        type: integer
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "data": {
               "id": 1,
               "status": "finished",
               "name": "radi",
               "start": null,
               "end": null,
               "organizerName": "radina",
               "organizerEmail": "radina@gmail.com",
               "type": "wedding",
               "moreInfo": null,
               "description": null,
               "accommodationNeeded": 1,
               "place": null,
               "pricePerGuest": null,
               "priceForFood": null,
               "foodDetails": null,
               "priceForAccommodation": null,
               "accommodationDetails": null,
               "accommodationContact": null,
               "hasGivenFeedback": false
             },
            "status": 200
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
               "success": false,
               "messages": [
                   "Missing event"
               ]
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
               "success": false,
               "messages": [
                   "This event is private"
               ]
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6DdabVcE3ePZ615fv48agkh'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/events
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Getting all finished events'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          [
            {
               "id": 1,
               "status": "finished",
               "name": "event 1",
               "start": null,
               "end": null,
               "organizerName": "radina",
               "organizerEmail": "radina@gmail.com",
               "type": "wedding"
            }
          ]
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/auth/login
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Log in the user'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      email:
        name: email
        description: 'Must be a valid email address.'
        required: true
        example: kkunze@example.com
        type: string
        custom: []
      password:
        name: password
        description: ''
        required: true
        example: cupiditate
        type: string
        custom: []
    cleanBodyParameters:
      email: kkunze@example.com
      password: cupiditate
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "access_token": "eyJ0eXA...",
           "token_type": "Bearer",
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
           "message": "Email & Password does not match with our record.",
           "errors": {
           "email": [
               "Email & Password does not match with our record."
               ]
           }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/auth/register
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Create User'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: ''
        required: true
        example: et
        type: string
        custom: []
      gender:
        name: gender
        description: 'Must be one of <code>female</code>, <code>male</code>, or <code>none</code>.'
        required: true
        example: male
        type: string
        custom: []
      email:
        name: email
        description: 'Must be a valid email address.'
        required: true
        example: qruecker@example.net
        type: string
        custom: []
      role:
        name: role
        description: 'Must be one of <code>client</code>, <code>organizer</code>, or <code>admin</code>.'
        required: true
        example: admin
        type: string
        custom: []
      password:
        name: password
        description: ''
        required: true
        example: quo
        type: string
        custom: []
      phone_number:
        name: phone_number
        description: ''
        required: true
        example: corrupti
        type: string
        custom: []
      address:
        name: address
        description: ''
        required: true
        example: sed
        type: string
        custom: []
    cleanBodyParameters:
      name: et
      gender: male
      email: qruecker@example.net
      role: admin
      password: quo
      phone_number: corrupti
      address: sed
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "access_token": "eyJ0eXA...",
           "token_type": "Bearer",
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
           "message": "The selected gender is invalid. (and 1 more error)",
           "errors": {
               "gender": [
                   "The selected gender is invalid."
               ],
               "email": [
                   "The email has already been taken."
               ]
           }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
