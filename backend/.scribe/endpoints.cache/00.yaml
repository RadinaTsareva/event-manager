## Autogenerated by Scribe. DO NOT MODIFY.

name: Endpoints
description: ''
endpoints:
  -
    httpMethods:
      - GET
    uri: api/users/current-user
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: "Get current user's info"
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "data": {
               "id": 1,
               "name": "radina555eee",
               "email": "dasdar44d@dada.com",
               "gender": "none",
               "blocked": 0,
               "role": "client",
               "address": "Address 1",
               "phone-number" : "08990889011"
            },
            "status": 200
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 15ag36DZefVkPa8dbEvch46'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/users/logout
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Logout for user'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer fhZ4Dcdegbk1V366a8v5PEa'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/users/change-password
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Change password for user'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      current_password:
        name: current_password
        description: ''
        required: true
        example: in
        type: string
        custom: []
      new_password:
        name: new_password
        description: ''
        required: true
        example: iure
        type: string
        custom: []
      new_confirm_password:
        name: new_confirm_password
        description: 'The value and <code>new_password</code> must match.'
        required: false
        example: null
        type: string
        custom: []
    cleanBodyParameters:
      current_password: in
      new_password: iure
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "data": [],
           "status": 200
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
           "message": "The current password is match with old password.",
            "errors": {
                "current_password": [
                   "The current password is match with old password."
                ]
             }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer efDZE8d4kc3gavV6P6a15bh'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/users/update
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: "Update user's info"
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: ''
        required: false
        example: qui
        type: string
        custom: []
      gender:
        name: gender
        description: 'Must be one of <code>female</code>, <code>male</code>, or <code>none</code>.'
        required: false
        example: male
        type: string
        custom: []
      email:
        name: email
        description: 'Must be a valid email address.'
        required: false
        example: elroy.murazik@example.org
        type: string
        custom: []
      role:
        name: role
        description: 'Must be one of <code>client</code>, <code>organizer</code>, or <code>admin</code>.'
        required: false
        example: admin
        type: string
        custom: []
      address:
        name: address
        description: ''
        required: false
        example: dolorem
        type: string
        custom: []
      phone_number:
        name: phone_number
        description: ''
        required: false
        example: quaerat
        type: string
        custom: []
    cleanBodyParameters:
      name: qui
      gender: male
      email: elroy.murazik@example.org
      role: admin
      address: dolorem
      phone_number: quaerat
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "data": [],
           "status": 200
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
           "message": "The selected gender is invalid.",
            "errors": {
                "gender": [
                   "The selected gender is invalid."
                ]
             }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer VeZdbPD16ack8vfa465h3gE'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/users/{id}/blacklist'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Blocking user'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the user.'
        required: true
        example: 1
        type: integer
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
               "data": [],
               "status": 200
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
               "success":false,
               "messages":["Non existing user"]
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer V561dgE4DvZ83ehbaPkacf6'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/events/types
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: "Getting all event's types"
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '["wedding","party"]'
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
           "success":false,
           "messages":[
               "The selected organizer is not an organizer or doesn't exists."
           ]
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer kgb4cefd83ZPDaa16Eh5V6v'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/events/organizers
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Getting all organizers'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
               "data": {
                   "id": 2,
                   "name": "radina",
                   "email": "dasda34e4d@dada.comh"
               },
               "status": 200
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer vb1k3Dhfa86adV64eEcgZP5'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/events/{eventType}/foodTypes'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Getting food types for event type'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      eventType:
        name: eventType
        description: ''
        required: true
        example: 8
        type: integer
        custom: []
    cleanUrlParameters:
      eventType: 8
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '["sea-food","sweets"]'
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
               "success":false,
               "messages":["The selected organizer is not an organizer or doesn't exists."]
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
              "message": "The organizer id field is required.",
              "errors": {
                  "organizerId": [
                      "The organizer id field is required."
                   ]
               }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer dZ5fVebc4hE18Pkv663agaD'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/events/personal
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Getting all events that are not finished for user'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          [
             {
               "id": 1,
               "status": "requested-actions",
               "name": "event 1",
               "start": null,
               "end": null,
               "organizerName": "radina",
               "organizerEmail": "radina@gmail.com",
               "organizerId": 1,
               "type": "wedding",
               "moreInfo": null,
               "description": null,
               "accommodationNeeded": 1,
               "place": null,
               "pricePerGuest": null,
               "priceForFood": null,
               "foodDetails": null,
               "priceForAccommodation": null,
               "accommodationDetails": null,
               "accommodationContact": null,
               "accommodationWebsite": null,
               "hasGivenFeedback": false
               "isPublic": false
            }
          ]
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer a5Zv6Eah46b1DPkcVefdg83'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/events/personal/all
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Getting all owned events'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          [
               {
                   "id": 1,
                   "status": "finished",
                   "name": "1",
                   "organizerEmail": "dasda34e4d@dada.comhee",
                   "clientEmail": "dasda34e4d@dada.comhee"
               }
          ]
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer c5fbZdEg1h6kaavD48P63Ve'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/events/{id}/accept'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Accepting event'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the event.'
        required: true
        example: 20
        type: integer
        custom: []
    cleanUrlParameters:
      id: 20
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 403
        content: |-
          {
               "success":false,
               "messages":["Non existing event"]
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer vbVgaEhe8cD5Z1a6kdP4f63'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/events/{id}/reject'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Rejecting event'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the event.'
        required: true
        example: 3
        type: integer
        custom: []
    cleanUrlParameters:
      id: 3
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 403
        content: |-
          {
               "success":false,
               "messages":["Non existing event"]
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer agehfdk6458P13EZb6vcaVD'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/events/{id}'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Getting event by id'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the event.'
        required: true
        example: 2
        type: integer
        custom: []
    cleanUrlParameters:
      id: 2
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "data": {
               "id": 1,
               "status": "finished",
               "name": "radi",
               "start": null,
               "end": null,
               "organizerName": "radina",
               "organizerEmail": "radina@gmail.com",
               "organizerId": 1,
               "type": "wedding",
               "moreInfo": null,
               "description": null,
               "accommodationNeeded": 1,
               "place": null,
               "pricePerGuest": null,
               "priceForFood": null,
               "foodDetails": null,
               "priceForAccommodation": null,
               "accommodationDetails": null,
               "accommodationContact": null,
               "accommodationWebsite": null,
               "hasGivenFeedback": false,
               "isPublic": false
             },
            "status": 200
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
               "success": false,
               "messages": [
                   "Missing event"
               ]
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
               "success": false,
               "messages": [
                   "This event is private"
               ]
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 5d4cbkDZ1gVPE3av6h6a8ef'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/events/{id}/comments'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Getting all comments for event'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the event.'
        required: true
        example: 20
        type: integer
        custom: []
    cleanUrlParameters:
      id: 20
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          [
               {
                   "userId": 1,
                   "userName": "radina",
                   "content": "really good :D"
               }
          ]
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer dbek43DPaf6V65hvEZ8cg1a'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/events/{id}/pics'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Getting all pics for event'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the event.'
        required: true
        example: 7
        type: integer
        custom: []
    cleanUrlParameters:
      id: 7
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '["https://picsum.photos/200/300"]'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6ZV4edk6a1fDPbc85g3ahvE'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/events/new
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Creates an event with basic data from client'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      organizerId:
        name: organizerId
        description: ''
        required: true
        example: 9
        type: integer
        custom: []
      name:
        name: name
        description: ''
        required: true
        example: nulla
        type: string
        custom: []
      start:
        name: start
        description: 'Must be a valid date. Must be a date before or equal to <code>end</code>.'
        required: true
        example: '2010-12-21'
        type: string
        custom: []
      end:
        name: end
        description: 'Must be a valid date. Must be a date after or equal to <code>start</code>.'
        required: true
        example: '2023-08-26'
        type: string
        custom: []
      type:
        name: type
        description: ''
        required: true
        example: possimus
        type: string
        custom: []
      isCatering:
        name: isCatering
        description: ''
        required: true
        example: true
        type: boolean
        custom: []
      foodType:
        name: foodType
        description: ''
        required: true
        example: et
        type: string
        custom: []
      description:
        name: description
        description: ''
        required: true
        example: 'Quidem sequi laudantium reiciendis et non doloremque.'
        type: string
        custom: []
      guestsCount:
        name: guestsCount
        description: 'Must be at least 1.'
        required: true
        example: 61
        type: integer
        custom: []
      accommodationNeeded:
        name: accommodationNeeded
        description: ''
        required: true
        example: true
        type: boolean
        custom: []
    cleanBodyParameters:
      organizerId: 9
      name: nulla
      start: '2010-12-21'
      end: '2023-08-26'
      type: possimus
      isCatering: true
      foodType: et
      description: 'Quidem sequi laudantium reiciendis et non doloremque.'
      guestsCount: 61
      accommodationNeeded: true
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
               "data": [],
               "status": 200
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
               "message": "The selected type is invalid.",
               "errors": {
                   "type": [
                       "The selected type is invalid."
                   ]
               }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
               "message": "This event type is not part of the organizer's ones (and 1 more error)",
               "errors": {
                   "type": [
                       "This event type is not part of the organizer's ones",
                       "This food type is not part of the organizer's menu,catering options"
                   ]
               }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer c8D5Ze4bEdaPf6h36gk1aVv'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/events/{id}'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: "Saves the event's data that the organizer is putting"
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the event.'
        required: true
        example: 4
        type: integer
        custom: []
    cleanUrlParameters:
      id: 4
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      eventId:
        name: eventId
        description: ''
        required: true
        example: 18
        type: integer
        custom: []
      place:
        name: place
        description: ''
        required: true
        example: itaque
        type: string
        custom: []
      placeWebsite:
        name: placeWebsite
        description: ''
        required: true
        example: dolore
        type: string
        custom: []
      placeGoogleMapsLink:
        name: placeGoogleMapsLink
        description: ''
        required: true
        example: at
        type: string
        custom: []
      pricePerGuest:
        name: pricePerGuest
        description: 'Must be at least 1.'
        required: true
        example: 83
        type: number
        custom: []
      priceForFood:
        name: priceForFood
        description: 'Must be at least 1.'
        required: true
        example: 32
        type: number
        custom: []
      priceForAccommodation:
        name: priceForAccommodation
        description: ''
        required: false
        example: 115.919
        type: number
        custom: []
      accommodationDetails:
        name: accommodationDetails
        description: ''
        required: false
        example: iusto
        type: string
        custom: []
      accommodationContact:
        name: accommodationContact
        description: ''
        required: false
        example: et
        type: string
        custom: []
    cleanBodyParameters:
      eventId: 18
      place: itaque
      placeWebsite: dolore
      placeGoogleMapsLink: at
      pricePerGuest: 83
      priceForFood: 32
      priceForAccommodation: 115.919
      accommodationDetails: iusto
      accommodationContact: et
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
               "data": [],
               "status": 200
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
               "message": "This field is required. (and 2 more errors)",
               "errors": {
                   "priceForAccommodation": [
                       "This field is required."
                   ],
                   "accommodationDetails": [
                       "This field is required."
                   ],
                   "accommodationContact": [
                       "This field is required."
                   ]
               }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer da6fab5E64gh3k1Dv8VZecP'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/users/{id}/event-types'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Getting all event types for user'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the user.'
        required: true
        example: 1
        type: integer
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          [
              "wedding"
          ]
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
               "success": false,
               "messages": [
                   "User either does not exist or it is not an organizer"
               ]
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 1a4vbdDZ66c5ka8EgV3ehfP'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/users/event-types
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Getting all event types for organizer'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          [
              "wedding"
          ]
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
               "success": false,
               "messages": [
                   "User either does not exist or it is not an organizer"
               ]
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 58aZ13eaVbgh4dvP6fE6cDk'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/users/{id}/{eventType}/menu-types'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Getting all menu types for user'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the user.'
        required: true
        example: 1
        type: integer
        custom: []
      eventType:
        name: eventType
        description: ''
        required: true
        example: labore
        type: string
        custom: []
    cleanUrlParameters:
      id: 1
      eventType: labore
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          [
              "sea-food"
          ]
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
               "success": false,
               "messages": [
                   "User either does not exist or it is not an organizer"
               ]
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6kdc5hVe6g18fE4baaPvZD3'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/users/{eventType}/menu-types'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Getting all menu types for organizer'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      eventType:
        name: eventType
        description: ''
        required: true
        example: 1
        type: integer
        custom: []
    cleanUrlParameters:
      eventType: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          [
              "sea-food"
          ]
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
               "success": false,
               "messages": [
                   "User either does not exist or it is not an organizer"
               ]
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer v3Pc6adDbh4kZg186EV5fea'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/users/{id}/{eventType}/catering-types'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Getting all catering types for user'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the user.'
        required: true
        example: 1
        type: integer
        custom: []
      eventType:
        name: eventType
        description: ''
        required: true
        example: sit
        type: string
        custom: []
    cleanUrlParameters:
      id: 1
      eventType: sit
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          [
              "sea-food"
          ]
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
               "success": false,
               "messages": [
                   "User either does not exist or it is not an organizer"
               ]
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer kb1cZPvaeaVfgh45d638D6E'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/users/{eventType}/catering-types'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Getting all catering types for organizer'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      eventType:
        name: eventType
        description: ''
        required: true
        example: 1
        type: integer
        custom: []
    cleanUrlParameters:
      eventType: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          [
              "sea-food"
          ]
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
               "success": false,
               "messages": [
                   "User either does not exist or it is not an organizer"
               ]
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer b3h5Zcea8Ed46vgPfV6Da1k'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/users/{type}'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Deleting type'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      type:
        name: type
        description: ''
        required: true
        example: 1
        type: integer
        custom: []
    cleanUrlParameters:
      type: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      id:
        name: id
        description: ''
        required: true
        example: 129.684
        type: number
        custom: []
    cleanBodyParameters:
      id: 129.684
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
               "data": [],
               "status": 200
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
               "message": "Non existing catering type",
               "errors": {
               "id": [
                   "Non existing catering type"
                   ]
               }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer ac8bdVE1D5ZhkPv4e66g3af'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/events
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Getting all finished events'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          [
            {
               "id": 1,
               "status": "finished",
               "name": "1",
               "type": "11",
               "place": null,
               "clientEmail": "client@gmail.com",
               "isPublic": true,
               "start": null,
               "end": null,
               "organizerName": "radina",
               "organizerEmail": "radina@gmail.com"
            }
          ]
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/users/login
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Log in the user'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      email:
        name: email
        description: 'Must be a valid email address.'
        required: true
        example: icruickshank@example.net
        type: string
        custom: []
      password:
        name: password
        description: ''
        required: true
        example: dolor
        type: string
        custom: []
    cleanBodyParameters:
      email: icruickshank@example.net
      password: dolor
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "token": "eyJ0eXA...",
           "token_type": "Bearer",
           "role" => "admin",
           "email" => "radina@gmail.com",
           "blacklistedCount" =>  0 // TODO
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
           "message": "Email & Password does not match with our record.",
           "errors": {
           "email": [
               "Email & Password does not match with our record."
               ]
           }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/users/register
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Create User'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: ''
        required: true
        example: laboriosam
        type: string
        custom: []
      gender:
        name: gender
        description: 'Must be one of <code>female</code>, <code>male</code>, or <code>none</code>.'
        required: true
        example: male
        type: string
        custom: []
      email:
        name: email
        description: 'Must be a valid email address.'
        required: true
        example: myah79@example.com
        type: string
        custom: []
      role:
        name: role
        description: 'Must be one of <code>client</code>, <code>organizer</code>, or <code>admin</code>.'
        required: true
        example: client
        type: string
        custom: []
      password:
        name: password
        description: ''
        required: true
        example: rerum
        type: string
        custom: []
      phone_number:
        name: phone_number
        description: ''
        required: true
        example: quis
        type: string
        custom: []
      address:
        name: address
        description: ''
        required: true
        example: quod
        type: string
        custom: []
    cleanBodyParameters:
      name: laboriosam
      gender: male
      email: myah79@example.com
      role: client
      password: rerum
      phone_number: quis
      address: quod
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "access_token": "eyJ0eXA...",
           "token_type": "Bearer",
           "role" => "admin",
           "email" => "radina@gmail.com",
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
           "message": "The selected gender is invalid. (and 1 more error)",
           "errors": {
               "gender": [
                   "The selected gender is invalid."
               ],
               "email": [
                   "The email has already been taken."
               ]
           }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
