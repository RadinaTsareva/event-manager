## Autogenerated by Scribe. DO NOT MODIFY.

name: Endpoints
description: ''
endpoints:
  -
    httpMethods:
      - GET
    uri: api/users/current-user
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: "Get current user's info"
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "data": {
               "id": 1,
               "name": "radina555eee",
               "email": "dasdar44d@dada.com",
               "gender": "none",
               "blocked": 0,
               "role": "client",
               "address": "Address 1",
               "phoneNumber" : "08990889011"
            },
            "status": 200
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 1afD5dP8vh6VZegb4Ec6ak3'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/users/logout
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Logout for user'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer ach56eEfZV8Pa6Dvk1gb43d'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/users/change-password
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Change password for user'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      current_password:
        name: current_password
        description: ''
        required: true
        example: distinctio
        type: string
        custom: []
      new_password:
        name: new_password
        description: ''
        required: true
        example: ut
        type: string
        custom: []
      new_confirm_password:
        name: new_confirm_password
        description: 'The value and <code>new_password</code> must match.'
        required: false
        example: null
        type: string
        custom: []
    cleanBodyParameters:
      current_password: distinctio
      new_password: ut
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "data": [],
           "status": 200
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
           "message": "The current password is match with old password.",
            "errors": {
                "current_password": [
                   "The current password is match with old password."
                ]
             }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer VaEagPfcbD61v84ek635hZd'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/users/update
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: "Update user's info"
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: ''
        required: false
        example: omnis
        type: string
        custom: []
      gender:
        name: gender
        description: 'Must be one of <code>female</code>, <code>male</code>, or <code>none</code>.'
        required: false
        example: none
        type: string
        custom: []
      email:
        name: email
        description: 'Must be a valid email address.'
        required: false
        example: wiegand.dock@example.net
        type: string
        custom: []
      role:
        name: role
        description: 'Must be one of <code>client</code>, <code>organizer</code>, or <code>admin</code>.'
        required: false
        example: client
        type: string
        custom: []
      address:
        name: address
        description: ''
        required: false
        example: dolor
        type: string
        custom: []
      phoneNumber:
        name: phoneNumber
        description: ''
        required: false
        example: voluptatem
        type: string
        custom: []
    cleanBodyParameters:
      name: omnis
      gender: none
      email: wiegand.dock@example.net
      role: client
      address: dolor
      phoneNumber: voluptatem
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "data": [],
           "status": 200
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
           "message": "The selected gender is invalid.",
            "errors": {
                "gender": [
                   "The selected gender is invalid."
                ]
             }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer P6D3bZ65aVdhvc8eaE1gk4f'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/users/{id}/blacklist'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Blocking user'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the user.'
        required: true
        example: 3
        type: integer
        custom: []
    cleanUrlParameters:
      id: 3
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
               "data": [],
               "status": 200
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
               "success":false,
               "messages":["Non existing user"]
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer e3adZD1Vgafvc5Ekb8h6P46'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/events/{eventTypeId}/foodTypes'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Getting food types for event type'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      eventTypeId:
        name: eventTypeId
        description: ''
        required: true
        example: 2
        type: integer
        custom: []
    cleanUrlParameters:
      eventTypeId: 2
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '["sea-food","sweets"]'
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
               "success":false,
               "messages":["The selected organizer is not an organizer or doesn't exists."]
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
              "message": "The organizer id field is required.",
              "errors": {
                  "organizerId": [
                      "The organizer id field is required."
                   ]
               }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer VaZkgabEd83P61fD65ehc4v'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/events/personal/{mouth}/{year}'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Getting all events that are not finished for user'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      mouth:
        name: mouth
        description: ''
        required: true
        example: aut
        type: string
        custom: []
      year:
        name: year
        description: ''
        required: true
        example: est
        type: string
        custom: []
    cleanUrlParameters:
      mouth: aut
      year: est
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          [
             {
               "id": 1,
               "status": "requested-actions",
               "name": "event 1",
               "start": null,
               "end": null,
               "organizerName": "radina",
               "organizerEmail": "radina@gmail.com",
               "organizerId": 1,
               "type": "wedding",
               "moreInfo": null,
               "description": null,
               "accommodationNeeded": 1,
               "place": null,
               "pricePerGuest": null,
               "priceForFood": null,
               "foodDetails": null,
               "priceForAccommodation": null,
               "accommodationDetails": null,
               "accommodationContact": null,
               "accommodationWebsite": null,
               "hasGivenFeedback": false
               "isPublic": false
            }
          ]
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer ckhZ3a1f5e84Da6EdPbv6gV'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/events/personal/all
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Getting all owned events'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          [
               {
                   "id": 1,
                   "status": "finished",
                   "name": "1",
                   "organizerEmail": "dasda34e4d@dada.comhee",
                   "clientEmail": "dasda34e4d@dada.comhee"
               }
          ]
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 4ba6g1VPc5evhaZd83kEfD6'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/events/{id}/accept'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Accepting event'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the event.'
        required: true
        example: 2
        type: integer
        custom: []
    cleanUrlParameters:
      id: 2
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 403
        content: |-
          {
               "success":false,
               "messages":["Non existing event"]
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 8vdEa5b3fea61PZV64hgDkc'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/events/{id}/reject'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Rejecting event'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the event.'
        required: true
        example: 2
        type: integer
        custom: []
    cleanUrlParameters:
      id: 2
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 403
        content: |-
          {
               "success":false,
               "messages":["Non existing event"]
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer DPb4fv65aZV6E3ac1kdhge8'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/events/{id}'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Getting event by id'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the event.'
        required: true
        example: 2
        type: integer
        custom: []
    cleanUrlParameters:
      id: 2
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          [
               "id": 1,
               "status": "finished",
               "name": "radi",
               "start": null,
               "end": null,
               "organizerName": "radina",
               "organizerEmail": "radina@gmail.com",
               "organizerId": 1,
               "type": "wedding",
               "moreInfo": null,
               "description": null,
               "accommodationNeeded": 1,
               "place": null,
               "pricePerGuest": null,
               "priceForFood": null,
               "foodDetails": null,
               "priceForAccommodation": null,
               "accommodationDetails": null,
               "accommodationContact": null,
               "accommodationWebsite": null,
               "hasGivenFeedback": false,
               "isPublic": false
             ],
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
               "success": false,
               "messages": [
                   "Missing event"
               ]
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
               "success": false,
               "messages": [
                   "This event is private"
               ]
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 81Dd6kf3Pe4gEaZbvVc65ah'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/events/{id}/comments'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Getting all comments for event'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the event.'
        required: true
        example: 2
        type: integer
        custom: []
    cleanUrlParameters:
      id: 2
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          [
               {
                   "userId": 1,
                   "userName": "radina",
                   "content": "really good :D"
               }
          ]
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer V81eEvhgPf566ca4ba3ZkdD'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/events/{id}/pics'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Getting all pics for event'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the event.'
        required: true
        example: 2
        type: integer
        custom: []
    cleanUrlParameters:
      id: 2
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '["https://picsum.photos/200/300"]'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 3EbZakVva6c158edDg4Ph6f'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/events/new
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Creates an event with basic data from client'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      organizerId:
        name: organizerId
        description: ''
        required: true
        example: 14
        type: integer
        custom: []
      name:
        name: name
        description: ''
        required: true
        example: ipsa
        type: string
        custom: []
      start:
        name: start
        description: 'Must be a valid date. Must be a date before or equal to <code>end</code>.'
        required: true
        example: '2017-10-22'
        type: string
        custom: []
      end:
        name: end
        description: 'Must be a valid date. Must be a date after or equal to <code>start</code>.'
        required: true
        example: '2103-01-28'
        type: string
        custom: []
      type:
        name: type
        description: ''
        required: true
        example: 1
        type: integer
        custom: []
      isCatering:
        name: isCatering
        description: ''
        required: true
        example: false
        type: boolean
        custom: []
      foodType:
        name: foodType
        description: ''
        required: true
        example: rerum
        type: string
        custom: []
      description:
        name: description
        description: ''
        required: true
        example: 'Aut voluptatem culpa assumenda.'
        type: string
        custom: []
      guestsCount:
        name: guestsCount
        description: 'Must be at least 1.'
        required: true
        example: 71
        type: integer
        custom: []
      accommodationNeeded:
        name: accommodationNeeded
        description: ''
        required: true
        example: false
        type: boolean
        custom: []
    cleanBodyParameters:
      organizerId: 14
      name: ipsa
      start: '2017-10-22'
      end: '2103-01-28'
      type: 1
      isCatering: false
      foodType: rerum
      description: 'Aut voluptatem culpa assumenda.'
      guestsCount: 71
      accommodationNeeded: false
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
               "data": [],
               "status": 200
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
               "message": "The selected type is invalid.",
               "errors": {
                   "type": [
                       "The selected type is invalid."
                   ]
               }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
               "message": "This event type is not part of the organizer's ones (and 1 more error)",
               "errors": {
                   "type": [
                       "This event type is not part of the organizer's ones",
                       "This food type is not part of the organizer's menu,catering options"
                   ]
               }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer dE6D3Z5gc6fvV8aehP1akb4'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/events/{id}'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: "Saves the event's data that the organizer is putting"
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the event.'
        required: true
        example: 2
        type: integer
        custom: []
    cleanUrlParameters:
      id: 2
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      eventId:
        name: eventId
        description: ''
        required: true
        example: 8
        type: integer
        custom: []
      place:
        name: place
        description: ''
        required: true
        example: harum
        type: string
        custom: []
      placeWebsite:
        name: placeWebsite
        description: ''
        required: true
        example: provident
        type: string
        custom: []
      placeGoogleMapsLink:
        name: placeGoogleMapsLink
        description: ''
        required: true
        example: error
        type: string
        custom: []
      pricePerGuest:
        name: pricePerGuest
        description: 'Must be at least 1.'
        required: true
        example: 68
        type: number
        custom: []
      priceForFood:
        name: priceForFood
        description: 'Must be at least 1.'
        required: true
        example: 15
        type: number
        custom: []
      priceForAccommodation:
        name: priceForAccommodation
        description: ''
        required: false
        example: 64374.0
        type: number
        custom: []
      accommodationDetails:
        name: accommodationDetails
        description: ''
        required: false
        example: ut
        type: string
        custom: []
      accommodationContact:
        name: accommodationContact
        description: ''
        required: false
        example: ea
        type: string
        custom: []
    cleanBodyParameters:
      eventId: 8
      place: harum
      placeWebsite: provident
      placeGoogleMapsLink: error
      pricePerGuest: 68
      priceForFood: 15
      priceForAccommodation: 64374.0
      accommodationDetails: ut
      accommodationContact: ea
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
               "data": [],
               "status": 200
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
               "message": "This field is required. (and 2 more errors)",
               "errors": {
                   "priceForAccommodation": [
                       "This field is required."
                   ],
                   "accommodationDetails": [
                       "This field is required."
                   ],
                   "accommodationContact": [
                       "This field is required."
                   ]
               }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6bcVPEaak134d5D6v8efghZ'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/events/{id}/comment'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Save comment'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the event.'
        required: true
        example: 2
        type: integer
        custom: []
    cleanUrlParameters:
      id: 2
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      commentInput:
        name: commentInput
        description: ''
        required: true
        example: eum
        type: string
        custom: []
    cleanBodyParameters:
      commentInput: eum
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
               "data": [],
               "status": 200
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer h183gV4Pd6acb5aEkv6ZDef'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/events/{id}/public'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Make event public'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the event.'
        required: true
        example: 2
        type: integer
        custom: []
    cleanUrlParameters:
      id: 2
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 66ZgEhfd3vc5k84PbaVDe1a'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/users/{id}/event-types'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Getting all event types for user'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the user.'
        required: true
        example: 3
        type: integer
        custom: []
    cleanUrlParameters:
      id: 3
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          [
               {
                   "id": 1,
                   "name": "wedding"
               }
          ]
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
               "success": false,
               "messages": [
                   "User either does not exist or it is not an organizer"
               ]
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer cVaZgbk61D5ePa386dfEvh4'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/users/event-types
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Getting all event types for organizer'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          [
               {
                   "id": 1,
                   "name": "wedding"
               }
          ]
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
               "success": false,
               "messages": [
                   "User either does not exist or it is not an organizer"
               ]
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6vb53D6PZgdcVeak8f1a4hE'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/users/{id}/{eventTypeId}/menu-types'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Getting all menu types for user'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the user.'
        required: true
        example: 3
        type: integer
        custom: []
      eventTypeId:
        name: eventTypeId
        description: ''
        required: true
        example: ut
        type: string
        custom: []
    cleanUrlParameters:
      id: 3
      eventTypeId: ut
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          [
               {
                   "id": 1,
                   "name": "sea-food"
               }
          ]
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
               "success": false,
               "messages": [
                   "User either does not exist or it is not an organizer"
               ]
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer VD6aPcv1h6a5eZdfbk384Eg'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/users/{eventTypeId}/menu-types'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Getting all menu types for organizer'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      eventTypeId:
        name: eventTypeId
        description: ''
        required: true
        example: 3
        type: integer
        custom: []
    cleanUrlParameters:
      eventTypeId: 3
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          [
               {
                   "id": 1,
                   "name": "sea-food"
               }
          ]
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
               "success": false,
               "messages": [
                   "User either does not exist or it is not an organizer"
               ]
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer ba6cv5PefE41DVgh3ka68dZ'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/users/{id}/{eventTypeId}/catering-types'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Getting all catering types for user'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the user.'
        required: true
        example: 3
        type: integer
        custom: []
      eventTypeId:
        name: eventTypeId
        description: ''
        required: true
        example: voluptates
        type: string
        custom: []
    cleanUrlParameters:
      id: 3
      eventTypeId: voluptates
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          [
               {
                   "id": 1,
                   "name": "sea-food"
               }
          ]
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
               "success": false,
               "messages": [
                   "User either does not exist or it is not an organizer"
               ]
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer Zce8Vf6bdgvhaa6k3P45D1E'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/users/{eventTypeId}/catering-types'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Getting all catering types for organizer'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      eventTypeId:
        name: eventTypeId
        description: ''
        required: true
        example: 3
        type: integer
        custom: []
    cleanUrlParameters:
      eventTypeId: 3
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          [
               {
                   "id": 1,
                   "name": "sea-food"
               }
          ]
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
               "success": false,
               "messages": [
                   "User either does not exist or it is not an organizer"
               ]
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer aDgdV1P68v4hZe5fbc6aE3k'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/users/create/{type}'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Adding new type (event,menu,catering)'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      type:
        name: type
        description: ''
        required: true
        example: natus
        type: string
        custom: []
    cleanUrlParameters:
      type: natus
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      eventTypeId:
        name: eventTypeId
        description: ''
        required: false
        example: 7
        type: integer
        custom: []
      value:
        name: value
        description: ''
        required: true
        example: qui
        type: string
        custom: []
    cleanBodyParameters:
      eventTypeId: 7
      value: qui
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
               "data": [],
               "status": 200
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
               "message": "The value field is required.",
               "errors": {
                   "value": [
                       "The value field is required."
                   ]
               }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6favbZhgV3ekc5d6P81EDa4'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/users/update/{type}'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: "Updating type's info"
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      type:
        name: type
        description: ''
        required: true
        example: sit
        type: string
        custom: []
    cleanUrlParameters:
      type: sit
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      id:
        name: id
        description: ''
        required: true
        example: 15
        type: integer
        custom: []
      value:
        name: value
        description: ''
        required: true
        example: et
        type: string
        custom: []
    cleanBodyParameters:
      id: 15
      value: et
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
               "data": [],
               "status": 200
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
               "message": "The given data was invalid.",
               "errors": {
                   "id": [
                       null,
                       "Non existing catering type"
                   ]
               }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 15dZaa6ckvegPfbE8DV3h46'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/users/{type}'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Deleting type'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      type:
        name: type
        description: ''
        required: true
        example: 3
        type: integer
        custom: []
    cleanUrlParameters:
      type: 3
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      id:
        name: id
        description: ''
        required: true
        example: 9.353
        type: number
        custom: []
    cleanBodyParameters:
      id: 9.353
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
               "data": [],
               "status": 200
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
               "message": "Non existing catering type",
               "errors": {
               "id": [
                   "Non existing catering type"
                   ]
               }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer baP61EZ6kDdh43vgec8V5fa'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/chat/list
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Getting all user who the current user has chatted'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          [
               {
                   "id": 1,
                   "value": "radina"
               }
          ]
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer Pca54g8EVDh16eZkfvdb63a'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/chat/{id}'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get all messages the user has received and sent'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the chat.'
        required: true
        example: sint
        type: string
        custom: []
    cleanUrlParameters:
      id: sint
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          [
               {
                   "id": 1,
                   "sender": "radina",
                   "message": "message",
                   "createdAt": "2023-02-03T10:54:59.000000Z"
               }
          ]
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 5gvPD6bec8af6hZ3k1VEd4a'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/chat
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Save message'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      id:
        name: id
        description: ''
        required: true
        example: ut
        type: string
        custom: []
      message:
        name: message
        description: ''
        required: true
        example: maxime
        type: string
        custom: []
    cleanBodyParameters:
      id: ut
      message: maxime
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
               "data": [],
               "status": 200
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer Eb1P6hV5vdZ6ga8fe43Dcak'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/organizers
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Getting all organizers'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
               "data": {
                   "id": 2,
                   "name": "radina",
                   "email": "dasda34e4d@dada.comh"
               },
               "status": 200
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer kV1DEah6P5b6e4dgaZf3cv8'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/events/{mouth}/{year}'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Getting all finished events'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      mouth:
        name: mouth
        description: ''
        required: true
        example: 2
        type: integer
        custom: []
      year:
        name: year
        description: ''
        required: true
        example: sit
        type: string
        custom: []
    cleanUrlParameters:
      mouth: 2
      year: sit
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          [
            {
               "id": 1,
               "status": "finished",
               "name": "1",
               "type": "11",
               "place": null,
               "clientEmail": "client@gmail.com",
               "isPublic": true,
               "start": null,
               "end": null,
               "organizerName": "radina",
               "organizerEmail": "radina@gmail.com"
            }
          ]
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/auth/login
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Log in the user'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      email:
        name: email
        description: 'Must be a valid email address.'
        required: true
        example: mrobel@example.com
        type: string
        custom: []
      password:
        name: password
        description: ''
        required: true
        example: a
        type: string
        custom: []
    cleanBodyParameters:
      email: mrobel@example.com
      password: a
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "token": "eyJ0eXA...",
           "token_type": "Bearer",
           "role" => "admin",
           "email" => "radina@gmail.com",
           "blacklistedCount" =>  [],
           "pendingEventsCount" => 0
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
           "message": "Email & Password does not match with our record.",
           "errors": {
           "email": [
               "Email & Password does not match with our record."
               ]
           }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/auth/register
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Create User'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: ''
        required: true
        example: ex
        type: string
        custom: []
      gender:
        name: gender
        description: 'Must be one of <code>female</code>, <code>male</code>, or <code>none</code>.'
        required: true
        example: female
        type: string
        custom: []
      email:
        name: email
        description: 'Must be a valid email address.'
        required: true
        example: dicki.fae@example.com
        type: string
        custom: []
      role:
        name: role
        description: 'Must be one of <code>client</code>, <code>organizer</code>, or <code>admin</code>.'
        required: true
        example: organizer
        type: string
        custom: []
      password:
        name: password
        description: ''
        required: true
        example: voluptatem
        type: string
        custom: []
      phoneNumber:
        name: phoneNumber
        description: ''
        required: true
        example: occaecati
        type: string
        custom: []
      address:
        name: address
        description: ''
        required: true
        example: sapiente
        type: string
        custom: []
    cleanBodyParameters:
      name: ex
      gender: female
      email: dicki.fae@example.com
      role: organizer
      password: voluptatem
      phoneNumber: occaecati
      address: sapiente
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "access_token": "eyJ0eXA...",
           "token_type": "Bearer",
           "role" => "admin",
           "email" => "radina@gmail.com",
           "blacklistedCount" =>  [],
           "pendingEventsCount" => 0
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
           "message": "The selected gender is invalid. (and 1 more error)",
           "errors": {
               "gender": [
                   "The selected gender is invalid."
               ],
               "email": [
                   "The email has already been taken."
               ]
           }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
